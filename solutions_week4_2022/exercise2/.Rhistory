p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
library(ggplot2)
library(gridExtra)
library(see)
# an easy way to visualize the posteriors
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text=element_text(size=10))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
library(ggplot2)
library(gridExtra)
library(see)
# an easy way to visualize the posteriors
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text=element_text(size=7))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
library(ggplot2)
library(gridExtra)
library(see)
# an easy way to visualize the posteriors
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=7))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
library(ggplot2)
library(gridExtra)
library(see)
# an easy way to visualize the posteriors
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta")) + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
+ theme(axis.text.y=element_text(size=8))
library(ggplot2)
library(gridExtra)
library(see)
# create ggplots of the wanted parameters
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta"))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta"))
# Rename and scale the size of the y-ticks
p2 = p2 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
p4 = p4 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
# Read the data
data = read.csv("white_fishes_data.csv")
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
colnames(y.noveg) <- c("y=0","y=1")
N.noveg = rowSums(y.noveg)
# Form a data table for sites with bottom vegetation
y.veg = table(data$AREANAME[data$BOTTOMCOV==1], data$WHIBIN[data$BOTTOMCOV==1])
colnames(y.veg) <- c("y=0","y=1")
N.veg = rowSums(y.veg)
par(mfrow=c(1,2))
plot(N.veg, main="Number of sampling sites", xlab="Area index", ylab="Number of sites")
points(N.noveg, col="red")
legend(1, 39, c("veg.","no veg."),col=c("black","red"), pch=1, cex=1, box.lty=1)
plot(y.veg[,1]/N.veg, main="proportion of sites with whitefish", xlab="Area index", ylab="proportion")
points(y.noveg[,1]/N.noveg, col="red")
print(y.veg)
# Read the data
data = read.csv("white_fishes_data.csv")
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
y.noveg
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
colnames(y.noveg) <- c("y=0","y=1")
N.noveg = rowSums(y.noveg)
# Form a data table for sites with bottom vegetation
y.veg = table(data$AREANAME[data$BOTTOMCOV==1], data$WHIBIN[data$BOTTOMCOV==1])
colnames(y.veg) <- c("y=0","y=1")
N.veg = rowSums(y.veg)
par(mfrow=c(1,2))
plot(N.veg, main="Number of sampling sites", xlab="Area index", ylab="Number of sites")
points(N.noveg, col="red")
legend(1, 39, c("veg.","no veg."),col=c("black","red"), pch=1, cex=1, box.lty=1)
plot(y.veg[,1]/N.veg, main="proportion of sites with whitefish", xlab="Area index", ylab="proportion")
points(y.noveg[,1]/N.noveg, col="red")
print(y.veg)
y.veg
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
colnames(y.noveg) <- c("y=0","y=1")
N.noveg = rowSums(y.noveg)
# Form a data table for sites with bottom vegetation
y.veg = table(data$AREANAME[data$BOTTOMCOV==1], data$WHIBIN[data$BOTTOMCOV==1])
colnames(y.veg) <- c("y=0","y=1")
N.veg = rowSums(y.veg)
par(mfrow=c(1,2))
plot(N.veg, main="Number of sampling sites", xlab="Area index", ylab="Number of sites")
points(N.noveg, col="red")
legend(1, 39, c("veg.","no veg."),col=c("black","red"), pch=1, cex=1, box.lty=1)
plot(y.veg[,2]/N.veg, main="proportion of sites with whitefish", xlab="Area index", ylab="proportion")
points(y.noveg[,2]/N.noveg, col="red")
print(y.veg)
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
colnames(y.noveg) <- c("y=0","y=1")
N.noveg = rowSums(y.noveg)
# Form a data table for sites with bottom vegetation
y.veg = table(data$AREANAME[data$BOTTOMCOV==1], data$WHIBIN[data$BOTTOMCOV==1])
colnames(y.veg) <- c("y=0","y=1")
N.veg = rowSums(y.veg)
par(mfrow=c(1,2))
plot(N.veg, main="Number of sampling sites", xlab="Area index", ylab="Number of sites")
points(N.noveg, col="red")
legend(1, 39, c("veg.","no veg."),col=c("black","red"), pch=1, cex=1, box.lty=1)
plot(y.veg[,2]/N.veg, main="proportion of sites with whitefish", xlab="Area index", ylab="proportion")
points(y.noveg[,2]/N.noveg, col="red")
print(y.veg)
library(ggplot2)
library(StanHeaders)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
set.seed(123)
whitefish.model = "data{
int<lower=0> n;       // number of sampling areas
int<lower=0> N[n];    // number of sites per area
int<lower=0> y[n];    // number of sites with white fish per area
}
parameters{
vector<lower=0, upper=1>[n] theta;
real<lower=0, upper=1> mu;
real<lower=0> s;
}
model{
theta ~ beta(mu*s,s-mu*s);
mu ~ uniform(0,1);
s ~ lognormal(4,2);
for( i in 1 : n ){
if (N[i]>0)
y[i] ~ binomial(N[i],theta[i]);
}
}"
data.noveg <- list ("n"=dim(y.noveg)[1],"N"=N.noveg, "y"=y.noveg[,2])   # no vegetation data
data.veg <- list ("n"=dim(y.veg)[1],"N"=N.veg, "y"=y.veg[,2])   # vegetated bottoms data
post.noveg=stan(model_code=whitefish.model,data=data.noveg,warmup=200,iter=400,chains=4,thin=5,control=list(adapt_delta=0.99))
post.veg=stan(model_code=whitefish.model,data=data.veg,warmup=200,iter=400,chains=4,thin=5,control=list(adapt_delta=0.99))
print(post.noveg)
plot(post.noveg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
plot(post.noveg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
stan_ac(post.noveg,c("s","mu"),inc_warmup = FALSE, lags = 25)
stan_ac(post.noveg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
print(post.veg)
plot(post.veg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
plot(post.veg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
stan_ac(post.veg,c("s","mu"),inc_warmup = FALSE, lags = 25)
stan_ac(post.veg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
print(post.noveg)
p1 = plot(post.noveg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
p2 = plot(post.noveg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
p3 = stan_ac(post.noveg,c("s","mu"),inc_warmup = FALSE, lags = 25)
p4 = stan_ac(post.noveg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
grid.arrange(p1,p2,p3,p4)
print(post.veg)
plot(post.veg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
plot(post.veg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
stan_ac(post.veg,c("s","mu"),inc_warmup = FALSE, lags = 25)
stan_ac(post.veg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
print(post.noveg)
p1 = plot(post.noveg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
p2 = plot(post.noveg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
p3 = stan_ac(post.noveg,c("s","mu"),inc_warmup = FALSE, lags = 25)
p4 = stan_ac(post.noveg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
grid.arrange(p1,p2,p3,p4)
print(post.veg)
p1=plot(post.veg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
p2=plot(post.veg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
p3=stan_ac(post.veg,c("s","mu"),inc_warmup = FALSE, lags = 25)
p4=stan_ac(post.veg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
grid.arrange(p1,p2,p3,p4)
library(ggplot2)
library(gridExtra)
library(see)
# create ggplots of the wanted parameters
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta"))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta"))
# Rename and scale the size of the y-ticks
p2 = p2 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
p4 = p4 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
row.names(y.veg)
library(ggplot2)
library(gridExtra)
library(see)
# create ggplots of the wanted parameters
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta"))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta"))
# Rename and scale the size of the y-ticks
p2 = p2 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
p4 = p4 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
samples.noveg = as.matrix(post.noveg,pars="theta")
samples.noveg
samples.noveg = as.matrix(post.noveg,pars="theta")
samples.veg = as.matrix(post.veg,pars="theta")
knitr::opts_chunk$set(echo = TRUE)
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
colnames(y.noveg) <- c("y=0","y=1")
N.noveg = rowSums(y.noveg)
# Form a data table for sites with bottom vegetation
y.veg = table(data$AREANAME[data$BOTTOMCOV==1], data$WHIBIN[data$BOTTOMCOV==1])
colnames(y.veg) <- c("y=0","y=1")
N.veg = rowSums(y.veg)
par(mfrow=c(1,2))
plot(N.veg, main="Number of sampling sites", xlab="Area index", ylab="Number of sites")
points(N.noveg, col="red")
legend(1, 39, c("veg.","no veg."),col=c("black","red"), pch=1, cex=1, box.lty=1)
plot(y.veg[,2]/N.veg, main="proportion of sites with whitefish", xlab="Area index", ylab="proportion")
points(y.noveg[,2]/N.noveg, col="red")
print(y.veg)
N.veg
library(ggplot2)
library(StanHeaders)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
set.seed(123)
whitefish.model = "data{
int<lower=0> n;       // number of sampling areas
int<lower=0> N[n];    // number of sites per area
int<lower=0> y[n];    // number of sites with white fish per area
}
parameters{
vector<lower=0, upper=1>[n] theta;
real<lower=0, upper=1> mu;
real<lower=0> s;
}
model{
theta ~ beta(mu*s,s-mu*s);
mu ~ uniform(0,1);
s ~ lognormal(4,2);
for( i in 1 : n ){
if (N[i]>0)
y[i] ~ binomial(N[i],theta[i]);
}
}"
data.noveg <- list ("n"=dim(y.noveg)[1],"N"=N.noveg, "y"=y.noveg[,2])   # no vegetation data
data.veg <- list ("n"=dim(y.veg)[1],"N"=N.veg, "y"=y.veg[,2])   # vegetated bottoms data
post.noveg=stan(model_code=whitefish.model,data=data.noveg,warmup=200,iter=400,chains=4,thin=5,control=list(adapt_delta=0.99))
post.veg=stan(model_code=whitefish.model,data=data.veg,warmup=200,iter=400,chains=4,thin=5,control=list(adapt_delta=0.99))
print(post.noveg)
p1 = plot(post.noveg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
p2 = plot(post.noveg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
p3 = stan_ac(post.noveg,c("s","mu"),inc_warmup = FALSE, lags = 25)
p4 = stan_ac(post.noveg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
grid.arrange(p1,p2,p3,p4)
library(gridExtra)
library(see)
print(post.noveg)
p1 = plot(post.noveg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
p2 = plot(post.noveg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
p3 = stan_ac(post.noveg,c("s","mu"),inc_warmup = FALSE, lags = 25)
p4 = stan_ac(post.noveg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
grid.arrange(p1,p2,p3,p4)
print(post.veg)
p1=plot(post.veg, plotfun= "trace", pars=c("s","mu"), inc_warmup = TRUE)
p2=plot(post.veg, plotfun= "trace", pars=c("theta[1]","theta[2]"), inc_warmup = TRUE)
p3=stan_ac(post.veg,c("s","mu"),inc_warmup = FALSE, lags = 25)
p4=stan_ac(post.veg,c("theta[1]","theta[2]"),inc_warmup = FALSE, lags = 25)
grid.arrange(p1,p2,p3,p4)
library(ggplot2)
library(gridExtra)
library(see)
# create ggplots of the wanted parameters
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta"))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta"))
# Rename and scale the size of the y-ticks
p2 = p2 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
p4 = p4 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu")) + theme(axis.text.y=element_text(size=8))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
theta.noveg = as.matrix(post.noveg,pars="theta")
theta.veg = as.matrix(post.veg,pars="theta")
phi = theta.noveg - theta.veg
dim(phi)
head(phi)
row.names(y.veg)
colnames(phi) <- row.names(y.veg)
head(phi)
rep(row.names(y.veg),2)
c(phi)
phi[1:2,1:2]
phi[1:2,1:2]
c(phi[1:2,1:2])
phi[1:2,1:2]
c(t(phi[1:2,1:2])
phi[1:2,1:2]
(
)
phi[1:2,1:2]
c(t(phi[1:2,1:2]))
rep(row.names(y.veg)[1:2],2)
phi[1:2,1:2]
c(t(phi[1:2,1:2]))
rep(row.names(y.veg)[1:2],2)
phi2=  as.data.frame(phi)
phi2
phi2=  as.data.frame(phi)
head(phi)
phi2
head(phi)
phi2$Bjuroklubb
ggplot(as.data.frame(phi), aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="# prior observations: 0",
x="Proportion", y = "posterior density")
ggplot(as.data.frame(phi)) + geom_violinhalf() +
coord_flip() + labs(title="# prior observations: 0",
x="Proportion", y = "posterior density")
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])),
value=c(phi) )
phi.fr
phi.fr$name
phi.fr$value
phi2=  as.data.frame(phi)
phi2
ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "posterior density")
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
phi = theta.noveg - theta.veg
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
# Set the column names to area names
colnames(phi) <- row.names(y.veg)
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])), value=c(t(phi)) )
Dmu.fr = data.frame(name=c( rep("mu",dim(Dmu)[1])), value=c(Dmu) )
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "posterior density")
grid.arrange(p1,p2)
p1 = ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "posterior density")
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "posterior density")
grid.arrange(p1,p2)
grid.arrange(p1,p2, nrow=2)
grid.arrange(p1,p2,nrow=2)
# generate samples of phi and Delta-mu
theta.noveg = as.matrix(post.noveg,pars="theta")
theta.veg = as.matrix(post.veg,pars="theta")
phi = theta.noveg - theta.veg
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
# Set the column names to area names
colnames(phi) <- row.names(y.veg)
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])), value=c(t(phi)) )
Dmu.fr = data.frame(name=c( rep("mu",dim(Dmu)[1])), value=c(Dmu) )
p1 = ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "difference")
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in expected probability of presence", y = "difference")
grid.arrange(p1,p2,nrow=2)
# generate samples of phi and Delta-mu
theta.noveg = as.matrix(post.noveg,pars="theta")
theta.veg = as.matrix(post.veg,pars="theta")
phi = theta.noveg - theta.veg
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
# Set the column names to area names
colnames(phi) <- row.names(y.veg)
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])), value=c(t(phi)) )
Dmu.fr = data.frame(name=c( rep("mu",dim(Dmu)[1])), value=c(Dmu) )
p1 = ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "difference")
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in expected probability of presence",x="," y = "difference")
# generate samples of phi and Delta-mu
theta.noveg = as.matrix(post.noveg,pars="theta")
theta.veg = as.matrix(post.veg,pars="theta")
phi = theta.noveg - theta.veg
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
# Set the column names to area names
colnames(phi) <- row.names(y.veg)
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])), value=c(t(phi)) )
Dmu.fr = data.frame(name=c( rep("mu",dim(Dmu)[1])), value=c(Dmu) )
p1 = ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "difference")
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in expected probability of presence",x="", y = "difference")
grid.arrange(p1,p2,nrow=2)
# generate samples of phi and Delta-mu
theta.noveg = as.matrix(post.noveg,pars="theta")
theta.veg = as.matrix(post.veg,pars="theta")
phi = theta.noveg - theta.veg
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
# Set the column names to area names
colnames(phi) <- row.names(y.veg)
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])), value=c(t(phi)) )
Dmu.fr = data.frame(name=c( rep("mu",dim(Dmu)[1])), value=c(Dmu) )
p1 = ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in probability of presence",x="Sampling area", y = "difference")
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(title="difference in expected probability of presence",x="", y = "difference")
grid.arrange(p1,p2,nrow=1)
# generate samples of phi and Delta-mu
theta.noveg = as.matrix(post.noveg,pars="theta")
theta.veg = as.matrix(post.veg,pars="theta")
phi = theta.noveg - theta.veg
Dmu = as.matrix(post.noveg,pars="mu") - as.matrix(post.veg,pars="mu")
# Set the column names to area names
colnames(phi) <- row.names(y.veg)
# put samples into data frame in order to allow ggplotting
phi.fr = data.frame(name=c( rep(row.names(y.veg),dim(phi)[1])), value=c(t(phi)) )
Dmu.fr = data.frame(name=c( rep("mu",dim(Dmu)[1])), value=c(Dmu) )
p1 = ggplot(phi.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(x="Sampling area", y = "difference in probability")
p2 = ggplot(Dmu.fr, aes(x=name,y=value)) + geom_violinhalf() +
coord_flip() + labs(x="", y = "difference in expected probability")
grid.arrange(p1,p2,nrow=1)
as.matrix(post.noveg,pars="theta")
as.matrix(post.noveg,pars="theta[19]")
dim(theta.noveg)[1]
theta.noveg[,19]
y_pred19.noveg = rbinom(dim(theta.noveg)[1],10,theta.noveg[,19])
y_pred19.veg = rbinom(dim(theta.veg)[1],10,theta.veg[,19])
par(mfrow=C(1,3))
y_pred19.noveg = rbinom(dim(theta.noveg)[1],10,theta.noveg[,19])
y_pred19.veg = rbinom(dim(theta.veg)[1],10,theta.veg[,19])
par(mfrow=C(1,3))
y_pred19.noveg = rbinom(dim(theta.noveg)[1],10,theta.noveg[,19])
y_pred19.veg = rbinom(dim(theta.veg)[1],10,theta.veg[,19])
par(mfrow=c(1,3))
hist(y_pred19.noveg)
hist(y_pred19.veg)
hist(y_pred19.noveg-y_pred19.veg)
y_pred19.noveg = rbinom(dim(theta.noveg)[1],10,theta.noveg[,19])
y_pred19.veg = rbinom(dim(theta.veg)[1],10,theta.veg[,19])
par(mfrow=c(1,3))
hist(y_pred19.noveg, main="no vegetation", xlab="y")
hist(y_pred19.veg, main="with vegetation", xlab="y")
hist(y_pred19.noveg-y_pred19.veg, main="difference", xlab="y")
mu_s.noveg = as.matrix(post.veg,pars=c("mu","s"))
mu_s.noveg = as.matrix(post.noveg,pars=c("mu","s"))
mu_s.veg = as.matrix(post.veg,pars=c("mu","s"))
mu_s.noveg = as.matrix(post.noveg,pars=c("mu","s"))
head(mu_s.noveg)
mu_s.noveg = as.matrix(post.noveg,pars=c("mu","s"))
mu_s.veg = as.matrix(post.veg,pars=c("mu","s"))
theta20.noveg = rbeta(dim(mu_s.noveg)[1],
mu_s.noveg[,"mu"]*mu_s.noveg[,"s"],
mu_s.noveg[,"s"]-mu_s.noveg[,"mu"]*mu_s.noveg[,"s"])
theta20.veg = rbeta(dim(mu_s.veg)[1],
mu_s.veg[,"mu"]*mu_s.veg[,"s"],
mu_s.veg[,"s"]-mu_s.veg[,"mu"]*mu_s.veg[,"s"])
theta20.noveg
mu_s.noveg = as.matrix(post.noveg,pars=c("mu","s"))
mu_s.veg = as.matrix(post.veg,pars=c("mu","s"))
theta20.noveg = rbeta(dim(mu_s.noveg)[1],
mu_s.noveg[,"mu"]*mu_s.noveg[,"s"],
mu_s.noveg[,"s"]-mu_s.noveg[,"mu"]*mu_s.noveg[,"s"])
theta20.veg = rbeta(dim(mu_s.veg)[1],
mu_s.veg[,"mu"]*mu_s.veg[,"s"],
mu_s.veg[,"s"]-mu_s.veg[,"mu"]*mu_s.veg[,"s"])
y_pred20.noveg = rbinom(length(theta20.noveg),10,theta20.noveg)
y_pred20.veg = rbinom(length(theta20.veg),10,theta20.veg)
par(mfrow=c(1,3))
hist(y_pred20.noveg, main="no vegetation", xlab="y")
hist(y_pred20.veg, main="with vegetation", xlab="y")
hist(y_pred20.noveg-y_pred20.veg, main="difference", xlab="y")
library(ggplot2)
library(gridExtra)
library(see)
# create ggplots of the wanted parameters
p1 = plot(post.noveg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("no vegetation")
p2 = plot(post.noveg, pars = c("mu","theta"))
p3 = plot(post.veg, plotfun = "hist", pars = c("s"),bins=50) + ggtitle("vegetation")
p4 = plot(post.veg, pars = c("mu","theta"))
# Rename and scale the size of the y-ticks
p2 = p2 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
p2 = p2 + theme(axis.text.y=element_text(size=8))
p4 = p4 + scale_y_continuous(breaks=c(1:20),labels=c(row.names(y.veg),"mu"))
p4 = p4 + theme(axis.text.y=element_text(size=8))
# arrange ggplots into grid
grid.arrange(p1, p2, p3, p4, nrow = 2)
