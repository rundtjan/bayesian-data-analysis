knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(StanHeaders)
library(rstan)
set.seed(123)
#mean for mu:
mean(Nsamp[,'mu[1]'])
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(StanHeaders)
library(rstan)
set.seed(123)
# Read the data
data = read.csv("white_fishes_data.csv")
# Form a data table for sites without bottom vegetation
y.noveg = table(data$AREANAME[data$BOTTOMCOV==0], data$WHIBIN[data$BOTTOMCOV==0])
colnames(y.noveg) <- c("y=0","y=1")
N.noveg = rowSums(y.noveg)
# Form a data table for sites with bottom vegetation
y.veg = table(data$AREANAME[data$BOTTOMCOV==1], data$WHIBIN[data$BOTTOMCOV==1])
colnames(y.veg) <- c("y=0","y=1")
N.veg = rowSums(y.veg)
par(mfrow=c(1,2))
plot(N.veg, main="Number of sampling sites", xlab="Area index", ylab="Number of sites")
points(N.noveg, col="red")
legend(1, 39, c("veg.","no veg."),col=c("black","red"), pch=1, cex=1, box.lty=1)
plot(y.veg[,2]/N.veg, main="proportion of sites with whitefish", xlab="Area index", ylab="proportion")
points(y.noveg[,2]/N.noveg, col="red")
print(y.veg)
print(y.noveg)
veg <- y.veg[19:36]
veg <- append(veg, 0, 6) #adding missing data, copying closest geographical location
noveg <- y.noveg[20:38]
y2 <- aperm(array(c(veg, noveg), dim=c(19,2)))
y2
N.veg <- append(N.veg, 1,6)
Ns <- aperm(array(c(N.veg, N.noveg), dim=c(19,2)))
Ns
fish_model = "
data {
int<lower = 0> dim;
int<lower = 0> n;
int y[dim, n];
int total[dim, n];
}
parameters {
real<lower=0, upper=1> theta[dim, n];
real<lower=0.01, upper=0.99> mu[dim];
real<lower=0.01> s[dim];
}
model {
for (d in 1:dim){
s[dim] ~ lognormal(4, 2);
for (site in 1:n){
theta[d, site] ~ beta(mu[d]*s[d], s[d] - mu[d]*s[d]);
y[d, site] ~ binomial(total[d, site], theta[d, site]);
}
}
}
"
dataset <- list("dim"=2, "n"=19, "y"=y2, "total"=Ns)
post=stan(model_code=fish_model,data=dataset,warmup=500,iter=1000,chains=3,thin=1)
print(post)
plot(post, plotfun= "trace", pars=colnames(as.matrix(post))[1:10], inc_warmup = TRUE)
plot(post, plotfun= "trace", pars=colnames(as.matrix(post))[30:40], inc_warmup = TRUE)
stan_ac(post,c("s[1]", "s[2]", "mu[1]", "mu[2]", "theta[1,1]", "theta[2,1]", "theta[1,10]", "theta[2,15]"),inc_warmup = FALSE, lags = 25)
Nsamp=as.matrix(post)
plot(post, plotfun = "hist", pars = colnames(Nsamp) ,bins=50)
diff_theta_19 <- Nsamp[,"theta[2,19]"] - Nsamp[, "theta[1,19]"]
hist(diff_theta_19, main="Theta difference area 19")
y_tilde_1 <- rbeta(1500, Nsamp[,"mu[1]"]*Nsamp[,"s[1]"], Nsamp[,"s[1]"] - Nsamp[,"mu[1]"]*Nsamp[,"s[1]"])
theta20_1_samp <- rbinom(y_tilde_1, 10, y_tilde_1)
hist(theta20_1_samp, breaks = 10, main="Sample from hypothetic area, vegetation")
y_tilde_2 <- rbeta(1500, Nsamp[,"mu[2]"]*Nsamp[,"s[2]"], Nsamp[,"s[2]"] - Nsamp[,"mu[2]"]*Nsamp[,"s[2]"])
theta20_2_samp <- rbinom(y_tilde_2, 10, y_tilde_2)
hist(theta20_2_samp, breaks = 10, main="Sample from hypothetic area, non-vegetation")
diff_y_20 = theta20_2_samp - theta20_1_samp
hist(diff_y_20, main="Theta difference in hypothetic area")
#mean for mu:
mean(Nsamp[,'mu[1]'])
mean(Nsamp[, 'mu[2]'])
sd(Nsamp[,'mu[1]'])
sd(Nsamp[, 'mu[2]'])
veg <- y.veg[19:36]
veg <- append(veg, 0, 6) #adding missing data, copying closest geographical location
noveg <- y.noveg[20:38]
y2 <- aperm(array(c(veg, noveg), dim=c(19,2)))
N.veg <- append(N.veg, 1,6)
Ns <- aperm(array(c(N.veg, N.noveg), dim=c(19,2)))
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(glmnetUtils)
m <- glm(formula = SPAM ~ MISSING_FROM + FROM_ADDR_WS + TVD_SPACE_RATIO + LOTS_OF_MONEY + T_FILL_THIS_FORM_SHORT, data=spam_train, family = binomial)
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("spam_train.csv")
spam_test <- read.csv("spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.001)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
phat
pred <- rep(0, 1000)
pred[phat > .5] = 1
pred
print(spam_test$SPAM)
#for accuracy
sum(pred == spam_test$SPAM)/1000
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.03)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("spam_train.csv")
spam_test <- read.csv("spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.0)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
phat
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("spam_train.csv")
spam_test <- read.csv("spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.0)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
#phat
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("spam_train.csv")
spam_test <- read.csv("spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 0, lambda = 0.0)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
#phat
library(glmnet)
library(glmnetUtils)
spam_train <- read.csv("spam_train.csv")
spam_test <- read.csv("spam_test.csv")
## Train the model
m <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 0, lambda = 0.0)
## Regression coefficients
print(coef(m))
## The predicted probabilities of y=1 on the test data
phat <- predict(m, spam_test, type = "response")[, 1]
#phat
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.03)
print(coef(m2))
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.03)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.02)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.05)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.06)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.002)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
m2 <- glmnet(SPAM ~ ., spam_train, family = "binomial", alpha = 1, lambda = 0.03)
print(coef(m2))
phat2 <- predict(m2, spam_test, type = "response")[, 1]
pred2 <- rep(0, 1000)
pred2[phat2 > .5] = 1
sum(pred2 == spam_test$SPAM)/1000
library(MLmetrics)
logloss <- LogLoss(pred2, spam_test$SPAM)
perp <- exp(logloss/1000)
perp
